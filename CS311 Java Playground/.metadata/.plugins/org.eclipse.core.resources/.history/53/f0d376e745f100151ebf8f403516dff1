package cs311_anagrams;

import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;

public class AnagramBST {
	private class NotFoundException extends Exception {}
	
	private AnagramClassNode root; //root will contain empty tag as sentinel
	
	public AnagramBST()
	{
		this.root = new AnagramClassNode("");
	}
	
	public void addNode(AnagramClassNode n){
		addNode(n, this.root);
	}
	
	private void addNode(AnagramClassNode n, AnagramClassNode tree){
		if(n.compareTo(tree) <= 0){
			if(tree.hasLeftChild())
				addNode(n, tree.getLeftChild());
			else 
				tree.setLeftChild(n);
		}
		else{
			if(tree.hasRightChild())
				addNode(n, tree.getRightChild());
			else
				tree.setRightChild(n);
		}
	}
	
	public void removeNode(String tag){
		
	}
	
	private String getPredecessor(AnagramClassNode tree) {
		while (tree.hasRightChild()) {
			tree = tree.getRightChild();
		}

		return tree.getTag();
	}
	
	/***
	 * Searches tree for tag
	 * @param tag
	 * @return found node for tag, null if not found
	 */
	public AnagramClassNode searchNode(String tag) {
		
	}
	
	/***
	 * Searches tree for node
	 * @param tag
	 * @param tree
	 * @return found node, or null if not found
	 */
	private AnagramClassNodeData searchNode(String tag, AnagramClassNode tree) {
		if(tree == null)
			return null;
		else if(tag.compareTo(tree.getData().getTag()) == 0)
			return tree.getData();
		else if(tag.compareTo(tree.getData().getTag()) < 0)
			return searchNode(tag, tree.getLeftChild());
		else 
			return searchNode(tag, tree.getRightChild());
	}
	
	/***
	 * Dumps entire tree to std out, skipping the root as it is a sentinel
	 */
	public void dump(){
		p_inOrderPrint(root.getLeftChild());
		p_inOrderPrint(root.getRightChild());
	}
	
	private void p_inOrderPrint(AnagramClassNode root){
		if ( root != null ) {  
			p_inOrderPrint(root.getLeftChild());
			System.out.print(root.toString()); 
			p_inOrderPrint(root.getRightChild()); 
		}
	}
}
